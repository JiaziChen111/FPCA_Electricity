u1.ar1 <âˆ’ arima.sim (model = list( ar = 0.75 ), innov = e1 , n = 250)
u2.ar1 <âˆ’ arima.sim (model = list( ar = 0.3 ) , innov = e2 , n = 250)
u1.ar1 <âˆ’ arima.sim (model = list( ar = 0.75 ), innov = e1 , n = 250)
plot(u1.ar1)
dcc.sim(250, a=c(0,0), A=c(0.5,0.5), B=c(0.5,0.6), R=c(1,0.7,0.7,1), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model=diagonal)
library(ccgarch)
dcc.sim(250, a=c(0,0), A=c(0.5,0.5), B=c(0.5,0.6), R=c(1,0.7,0.7,1), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model=diagonal)
install.packages("ccgarch")
dcc.sim(250, a=c(0,0), A=c(0.5,0.5), B=c(0.5,0.6), R=c(1,0.7,0.7,1), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model=diagonal)
dcc.sim(250, a=c(0,0), A=c(0.5,0.5), B=c(0.5,0.6), R=c(1,0.7,0.7,1), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model="diagonal")
dcc.sim(250, a=c(0,0), A=c(0.5,0,0,0.5), B=c(0.5,0,0,0.6), R=c(1,0.7,0.7,1), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model="diagonal")
dcc.sim(250, a=c(0,0), A=matrix(c(0.5,0,0,0.5),nrow=2), B=matrix(c(0.5,0,0,0.5),nrow=2), R=matrix(c(1,0.7,0.7,1),nrow=2), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model="diagonal")
dcc.sim(250, a=c(0,0), A=matrix(c(0.2,0,0,0.5),nrow=2), B=matrix(c(0.5,0,0,0.6),nrow=2), R=matrix(c(1,0.7,0.7,1),nrow=2), dcc.para=c(0.8,0.1), d.f=Inf, cut=1000, model="diagonal")
set.seed(12345)
nobs <- 250; cut <- 1000
a <- c(0, 0, 0)
A <- diag(c(0.2,0.3,0.15))
B <- diag(c(0.75, 0.6, 0.8))
uncR <- matrix(c(1.0, 0.4, 0.3, 0.4, 1.0, 0.12, 0.3, 0.12, 1.0),3,3)
dcc.para <- c(0.01,0.98)
dcc.data <- dcc.sim(nobs, a, A, B, uncR, dcc.para, model="diagonal")
plott(dcc.data)
plot(dcc.data)
plot(dcc.data[,1])
plot(dcc.data$eps[,1])
plot(dcc.data$eps[,2])
plot(dcc.data$eps[,3])
nobs <- 250; cut <- 1000
a <- c(0, 0)
A <- diag(c(0.2,0.3))
B <- diag(c(0.75, 0.6))
uncR <- matrix(c(1.0, 0.4, 0.3, 1.0),2,2)
dcc.para <- c(0.01,0.98)
dcc.data <- dcc.sim(nobs, a, A, B, uncR, dcc.para, model="diagonal")
plot(dcc.data$eps[,1])
dcc.data$eps
dcc.data
a <- c(0.003, 0.005)
A <- diag(c(0.2,0.3))
B <- diag(c(0.75, 0.6))
uncR <- matrix(c(1.0, 0.4, 0.3, 1.0),2,2)
dcc.para <- c(0.01,0.98)
dcc.data <- dcc.sim(nobs, a, A, B, uncR, dcc.para, model="diagonal")
dcc.data$h
dcc.data$eps
plot(dcc.data$eps[,1])
plot(dcc.data$eps[,1],type="l")
lines(dcc.data$eps[,2])
lines(dcc.data$eps[,2],coL0"")
lines(dcc.data$eps[,2],col=2)
alpha = c(-1.0)
beta = c(1,-1)
delta.y2 = cumsum(dcc.data$eps[,2])
plot(delta.y2)
plot(delta.y2,type="l")
y2 = cumsum(dcc.data$eps[,2])
y1 = matrix(0,250,1)
for(i in 2:250){
y1[i,]=(alpha[1]+1)*y[i-1,]+alpha[1]*beta[2]*y2[i-1]+dcc.data$eps[,1]
}
y1 = matrix(0,250,1)
for(i in 2:250){
y1[i,]=(alpha[1]+1)*y1[i-1,]+alpha[1]*beta[2]*y2[i-1]+dcc.data$eps[,1]
}
y1[1,]
(alpha[1]+1)*y1[i-1,]+alpha[1]*beta[2]*y2[i-1]+dcc.data$eps[,1]
y2[i-1]
y1[i,]=(alpha[1]+1)*y1[i-1,]+alpha[1]*beta[2]*y2[i-1]+dcc.data$eps[i,1]
for(i in 2:250){
y1[i,]=(alpha[1]+1)*y1[i-1,]+alpha[1]*beta[2]*y2[i-1]+dcc.data$eps[i,1]
}
plot(y1)
plot(y1,type="l")
lines(y2)
lines(y2,col=2)
alpha[1]*beta[2]
alpha[1]*beta[2]
data = data.frame(c(y1,y2))
data = data.frame((y1,y2))
data = data.frame(cbind(y1,y2))
diff.data = cbind(diff(data[,1]),diff(data[,2]))
plot(diff.data[,1])
plot(diff.data[,1],type="l")
plot(diff.data[,2],type="l")
lines(dcc.data$eps[,2])
lines(dcc.data$eps[,2],col=2)
plot(dcc.data$dcc)
plot(dcc.data$dcc[,1])
dcc.data$dcc
plot(dcc.data$dcc[,2])
plot(dcc.data$dcc[,3])
lag=cbind(Lag(data[,1]),Lag(data[,2]))
library(quantmod)
lag=cbind(Lag(data[,1]),Lag(data[,2]))
vecm_ols=VAR(diff, p=1, exogen=lag[-1,])
library(VAR)
library(var)
library(vars)
vecm_ols=VAR(diff, p=1, exogen=lag[-1,])
vecm_ols=VAR(diff.data, p=1, exogen=lag[-1,])
View(diff.data)
View(lag)
colnames(lag)=c("L1","L2")
vecm_ols=VAR(diff.data, p=1, exogen=lag[-1,])
plot(u[,1])
u = residuals(vecm_ols)
plot(u[,1])
plot(u[,2])
plot(u[,1])
lines(dcc.data$eps[,1])
lines(dcc.data$eps[,1],col=2)
plot(u[,1])
lines(dcc.data$eps[2:250,1],col=2)
lines(dcc.data$eps[3:250,1],col=2)
plot(u[,1])
lines(dcc.data$eps[3:250,1],col=2)
inia = c(0,0,0)
iniA = matrix(c(rep(0.5,9)),ncol=3)
iniB = matrix(c(rep(0.5,9)),ncol=3)
ini.dcc = c(0.2,0.7)
dcc = dcc.estimation(inia=inia, iniA=iniA, iniB=iniB, ini.dcc=ini.dcc,dvar=u, model="diagonal", method="BFGS")
dcc.ext = dcc.estimation(inia=inia, iniA=iniA, iniB=iniB, ini.dcc=ini.dcc,dvar=u, model="extended", method="BFGS")
D_t = dcc$h
R_t = dcc$DCC
Sigma = array(0,dim=c(nrow(R_t),3,3))
for(i in 1:nrow(R_t)){
Sigma[i,,] = matrix(Diagonal(n=3,D_t[i,])%*%matrix(R_t[i,],nrow=3,byrow=3)%*%Diagonal(n=3,D_t[i,]),nrow=3)
}
inia = c(0,0,0)
iniA = matrix(c(rep(0.5,9)),ncol=3)
iniB = matrix(c(rep(0.5,9)),ncol=3)
ini.dcc = c(0.2,0.7)
dcc = dcc.estimation(inia=inia, iniA=iniA, iniB=iniB, ini.dcc=ini.dcc,dvar=u, model="diagonal", method="BFGS")
inia = c(0,0)
iniA = matrix(c(rep(0.5,9)),ncol=2)
iniB = matrix(c(rep(0.5,9)),ncol=2)
iniA = matrix(c(rep(0.5,4)),ncol=2)
iniB = matrix(c(rep(0.5,4)),ncol=2)
ini.dcc = c(0.2,0.7)
dcc = dcc.estimation(inia=inia, iniA=iniA, iniB=iniB, ini.dcc=ini.dcc,dvar=u, model="diagonal", method="BFGS")
dcc.ext = dcc.estimation(inia=inia, iniA=iniA, iniB=iniB, ini.dcc=ini.dcc,dvar=u, model="extended", method="BFGS")
D_t = dcc$h
R_t = dcc$DCC
Sigma = array(0,dim=c(nrow(R_t),3,3))
for(i in 1:nrow(R_t)){
Sigma[i,,] = matrix(Diagonal(n=3,D_t[i,])%*%matrix(R_t[i,],nrow=3,byrow=3)%*%Diagonal(n=3,D_t[i,]),nrow=3)
}
library(Diagonal)
library(Matrix)
Sigma = array(0,dim=c(nrow(R_t),3,3))
for(i in 1:nrow(R_t)){
Sigma[i,,] = matrix(Diagonal(n=3,D_t[i,])%*%matrix(R_t[i,],nrow=3,byrow=3)%*%Diagonal(n=3,D_t[i,]),nrow=3)
}
Sigma[i,,] = matrix(Diagonal(n=2,D_t[i,])%*%matrix(R_t[i,],nrow=2,byrow=2)%*%Diagonal(n=2,D_t[i,]),nrow=2)
}
for(i in 1:nrow(R_t)){
Sigma[i,,] = matrix(Diagonal(n=2,D_t[i,])%*%matrix(R_t[i,],nrow=2,byrow=2)%*%Diagonal(n=2,D_t[i,]),nrow=2)
}
Sigma = array(0,dim=c(nrow(R_t),2,2))
for(i in 1:nrow(R_t)){
Sigma[i,,] = matrix(Diagonal(n=2,D_t[i,])%*%matrix(R_t[i,],nrow=2,byrow=2)%*%Diagonal(n=2,D_t[i,]),nrow=2)
}
plot(Sigma[1,1])
plot(Sigma[1,1,])
plot(Sigma[,1,1])
plot(Sigma[,1,1],type="l")
plot(Sigma[,2,1],type="l")
plot(Sigma[,2,2],type="l")
plot(Sigma[,1,2],type="l")
plot(D_t)
plot(D_t[,1])
plot(D_t[,1],type="l")
lines(dcc.data$h[,1])
plot(D_t[,2])
lines(dcc.data$h[,2])
dim(D_t)
dim(R_t)
plot(R_t[,1])
plot(R_t[,2])
plot(R_t[,2],type="l")
lines(dcc.data$dcc[,2])
plot(R_t[,3],type="l")
lines(dcc.data$dcc[,3])
plot(R_t[2])
plot(R_t[2,])
plot(R_t[,2])
lines(R_t[,3])
View(R_t)
dcc.data$dcc
rm(list = ls(all = TRUE))
install.packages("fGarch")
install.packages("QRM")
install.packages("copula")
library(fGarch)
library(QRM)
library(copula)
app1residual <- read.csv("T:/Quantgroup/TODO/Franzi/COPapp1residual/app1residual.csv", header=F)
View(app1residual)
X=app1residual
rownames(X) = X[, 1]
R           = apply(log(X[, -1]), 2, diff) # compute log-returns
X           = X[, -1]
where.put   = which(diff(as.numeric(format(as.Date(rownames(X), "%d.%m.%Y"),
"%Y%m"))) != 0)
labels      = format(as.Date(rownames(X), "%d.%m.%Y"), "%b %Y")
eps         = matrix(nrow = dim(R)[1], ncol = dim(R)[2])
# estimate parameters of an ARMA(1,1)+GARCH(1,1) model
if(exists("params")){rm(params)}
for(i in 1:dim(R)[2]){
fit = garchFit(~arma(1, 0) + garch(1, 1), data = R[, i], trace = F)
eps[,i] = fit@residuals / fit@sigma.t # compute the residuals
if(!exists("params")){params = c(fit@fit$coef,
"BL" = Box.test(eps[, i],
type = "Ljung-Box", lag = 12)$p.value,
"KS" = ks.test(eps[, i], "pnorm")$p.value)}
else {params = rbind(params, c(fit@fit$coef,
Box.test(eps[, i], type = "Ljung-Box",
lag = 12)$p.value,
ks.test(eps[, i], "pnorm")$p.value))}
params = rbind(params, c(fit@fit$matcoef[, 2], NA, NA))
}
# do plot
layout(matrix(1:9, nrow=3, ncol=3, byrow = T))
library(fGarch)
install.packages("fGarch")
library(fGarch)
install.packages("fGarch")
remove.packages("fGarch")
if(exists("params")){rm(params)}
for(i in 1:dim(R)[2]){
fit = garchFit(~arma(1, 0) + garch(1, 1), data = R[, i], trace = F)
eps[,i] = fit@residuals / fit@sigma.t # compute the residuals
if(!exists("params")){params = c(fit@fit$coef,
"BL" = Box.test(eps[, i],
type = "Ljung-Box", lag = 12)$p.value,
"KS" = ks.test(eps[, i], "pnorm")$p.value)}
else {params = rbind(params, c(fit@fit$coef,
Box.test(eps[, i], type = "Ljung-Box",
lag = 12)$p.value,
ks.test(eps[, i], "pnorm")$p.value))}
params = rbind(params, c(fit@fit$matcoef[, 2], NA, NA))
}
?garchFit
mse <- read.csv("C:/Users/Franziska Schulz/Dropbox/Phd/R Files/Simulation Comparison/mse/mse/mse_1_p1.csv")
mean(mse[,2])
sd(mse[,2])
plot(mse[,2])
median(mse[,2])
mse <- read.csv("C:/Users/Franziska Schulz/Dropbox/Phd/R Files/Simulation Comparison/mse/mse/mse_1_p2.csv")
mean(mse[,2])
sd(mse[,2])
mse <- read.csv("C:/Users/Franziska Schulz/Dropbox/Phd/R Files/Simulation Comparison/mse/mse/mse_1_p4.csv")
mean(mse[,2])
sd(mse[,2])
mse <- read.csv("C:/Users/Franziska Schulz/Dropbox/Phd/R Files/Simulation Comparison/mse/mse/mse_1_p3.csv")
mean(mse[,2])
sd(mse[,2])
load("C:/Users/Franziska Schulz/Dropbox/Phd/R Files/Electricity Consumption/WS20140318_InSample_SB.RData")
model
endo<-a_Resid4
colnames(endo)<-c("s1","s2","s3","s4")
model<-VAR(endo,exogen=exo,lag.max=30,type="const",ic="AIC")
#---------------------------------------------
libraries<-c("fda.usc","ggplot2","vars","dse","CADFtest","forecast","gdata","urca","car","np","sm","DierckxSpline","mFilter","stats","tseries","zoo","quantreg", "orthogonalsplinebasis","expectreg", "splines","Matrix", "MatrixModels", "cobs","fields","stargazer")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,require,quietly=TRUE,character.only=TRUE)
exo<-cbind( resid_temp,resid_sun)#,Daily_Spot[1:702])
colnames(exo)<-c("TEMP","Sun_L")
endo<-a_Resid4
colnames(endo)<-c("s1","s2","s3","s4")
model<-VAR(endo,exogen=exo,lag.max=30,type="const",ic="AIC")
summary(model)
## create tables for Latex using stargazer
model<-VAR(endo,exogen=exo,lag.max=30,type="const",ic="SC")
summary(model)
model<-VAR(endo,exogen=exo,lag.max=30,type="const",ic="AIC")
summary(model)
summary(ltsc)
model<-VAR(endo,exogen=exo,lag=7)
summary(model)
setwd("C:\\Users\\Franziska Schulz\\Desktop\\Github\\FPCA_Electricity\\FPCA_Electricity_Application\\Saarbruecken")
load("Data.RData")
load("C:/Users/Franziska Schulz/Desktop/Github/FPCA_Electricity/FPCA_Electricity_Application/Saarbruecken/Data_SB.RData")
load("Data_SB.RData")
statistics = function(x){c(median(x),mean(x),sd(x),min(x),max(x))}
stat = statistics(as.matrix(Load_mat[,-1]))
names(stat) = c("Median","Mean","SD","Min","Max")
stat
## Plot 2: Temperature, Sunshine
plot(Temperature, type="l", lwd = 3, cex.axis = 2,xaxt='n', cex.lab = 2, xlab = "Time")
axis(1,c(175.5,526.5,877.5),c("2010","2011","2013"),cex.axis=2)
plot(Sun, type="l", lwd = 3, cex.axis = 2,xaxt='n', cex.lab = 2, xlab = "Time")
axis(1,c(175.5,526.5,877.5),c("2010","2011","2013"),cex.axis=2)
## Deterministic Seasonal Component
k=0
n=702
weekhours       = 7*96
hours           = 96
week            = 1:weekhours
yearhours       = 351
year            = 1:yearhours
training        = Load_mat[1:n,-1] #
training_temp   = Temperature[1:n] # 2 day forecast
training_sun    = Sun[1:n]
#leap            = which(Load_mat[,1]=="2012-02-28")
# transpose and reshape
Load_t          = as.data.frame(t((training))) # log transformation
Load_list       = unlist(Load_t,recursive=TRUE)
####
fourier.series = function(t,terms,period)
{
n = length(t)
X = matrix(,nrow=n,ncol=2*terms)
for(i in 1:terms)
{
X[,2*i-1] = sin(2*pi*i*t/period)
X[,2*i]   = cos(2*pi*i*t/period)
}
colnames(X)   = paste(c("S","C"),rep(1:terms,rep(2,terms)),sep="")
return(X)
}
dsc = function(Load_list, WD, PH){
# Load: Load in long format
# WD: Dummie for Weekdy
RLoad = Load_list
# PH: Dummie for Public Holiday
DT_RLoad = RLoad
season_forecast = matrix(ncol=1,nrow=96)
for(i in 1:96){
index = as.numeric(seq(from=i, to=(702+k)*96, by=96))
temp = RLoad[index]
temp_date = Load_mat[index,1]
t = 1:length(temp)
ltsc = lm(temp ~ t + X[-(702+k+1),] + PH[-(702+k+1)] + fourier.series(t,4,365.25))#+ Dec24 + Dec25 + Dec26 + Dec31 + Jan01 + WH
#plot(ltsc$residuals,type="l")
#plot(temp,type="l")
#lines(ltsc$fit,type="l",col=2)
DT_RLoad[index] = ltsc$residuals
}
return(DT_RLoad)
}
## Dummies
tempseq = as.numeric(rep(rep(c(1:7),each=1),length.out=702+k+1))
Mo = as.numeric(tempseq==6)
Tu = as.numeric(tempseq==7)
We = as.numeric(tempseq==1)
Th = as.numeric(tempseq==2)
Fr = as.numeric(tempseq==3)
Sa = as.numeric(tempseq==4)
WD  = cbind(Mo, Tu, We, Th, Fr, Sa)
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-08-15","2011-10-03","2011-11-01", #,"2011-05-01"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-10-03","2012-11-01",
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% c(PH_dummy))# public holiday
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-08-15","2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-08-15","2011-10-03","2011-11-01", #,"2011-05-01"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-08-15","2012-10-03","2012-11-01",
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% PH_dummy)# public holiday
#BD = as.numeric(Load_mat[(1:(702+k+1)),1] %in% BD_dummy)# Bridge Day
#MariaH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-08-15","2011-08-15","2012-05-18")))
#PH_Sun = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-10-03","2011-05-01")))
#PH_Sat = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-05-01")))
#PH.Dummie = cbind(WH, PH, BD, MariaH, PH_Sun, PH_Sat)
DT_RLoad = dsc(Load_list, WD, PH)
plot(RLoad,type="l")
plot(DT_RLoad,type="l")
DT_RLoad = dsc(Load_list, WD, PH)
tempseq = as.numeric(rep(rep(c(1:7),each=1),length.out=702+k+1))
Mo = as.numeric(tempseq==6)
Tu = as.numeric(tempseq==7)
We = as.numeric(tempseq==1)
Th = as.numeric(tempseq==2)
Fr = as.numeric(tempseq==3)
Sa = as.numeric(tempseq==4)
WD  = cbind(Mo, Tu, We, Th, Fr, Sa)
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-08-15","2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-08-15","2011-10-03","2011-11-01", #,"2011-05-01"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-08-15","2012-10-03","2012-11-01",
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% PH_dummy)# public holiday
#BD = as.numeric(Load_mat[(1:(702+k+1)),1] %in% BD_dummy)# Bridge Day
#MariaH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-08-15","2011-08-15","2012-05-18")))
#PH_Sun = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-10-03","2011-05-01")))
#PH_Sat = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-05-01")))
#PH.Dummie = cbind(WH, PH, BD, MariaH, PH_Sun, PH_Sat)
DT_RLoad = dsc(Load_list, WD, PH)
## Deterministic Seasonal Component
k=0
n=702
weekhours       = 7*96
hours           = 96
week            = 1:weekhours
yearhours       = 351
year            = 1:yearhours
training        = Load_mat[1:n,-1] #
training_temp   = Temperature[1:n] # 2 day forecast
training_sun    = Sun[1:n]
#leap            = which(Load_mat[,1]=="2012-02-28")
# transpose and reshape
Load_t          = as.data.frame(t((training))) # log transformation
Load_list       = unlist(Load_t,recursive=TRUE)
tempseq = as.numeric(rep(rep(c(1:7),each=1),length.out=702+k+1))
Mo = as.numeric(tempseq==6)
Tu = as.numeric(tempseq==7)
We = as.numeric(tempseq==1)
Th = as.numeric(tempseq==2)
Fr = as.numeric(tempseq==3)
Sa = as.numeric(tempseq==4)
WD  = cbind(Mo, Tu, We, Th, Fr, Sa)
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-08-15","2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-08-15","2011-10-03","2011-11-01", #,"2011-05-01"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-08-15","2012-10-03","2012-11-01",
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% PH_dummy)# public holiday
#BD = as.numeric(Load_mat[(1:(702+k+1)),1] %in% BD_dummy)# Bridge Day
#MariaH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-08-15","2011-08-15","2012-05-18")))
#PH_Sun = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-10-03","2011-05-01")))
#PH_Sat = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-05-01")))
#PH.Dummie = cbind(WH, PH, BD, MariaH, PH_Sun, PH_Sat)
DT_RLoad = dsc(Load_list, WD, PH)
dsc = function(Load_list, WD, PH){
# Load: Load in long format
# WD: Dummie for Weekdy
# PH: Dummie for Public Holiday
RLoad = Load_list
DT_RLoad = RLoad
season_forecast = matrix(ncol=1,nrow=96)
for(i in 1:96){
index = as.numeric(seq(from=i, to=(702+k)*96, by=96))
temp = RLoad[index]
temp_date = Load_mat[index,1]
t = 1:length(temp)
ltsc = lm(temp ~ t + WD[-(702+k+1),] + PH[-(702+k+1)] + fourier.series(t,4,365.25))#+ Dec24 + Dec25 + Dec26 + Dec31 + Jan01 + WH
#plot(ltsc$residuals,type="l")
#plot(temp,type="l")
#lines(ltsc$fit,type="l",col=2)
DT_RLoad[index] = ltsc$residuals
}
return(DT_RLoad)
}
DT_RLoad = dsc(Load_list, WD, PH)
plot(DT_RLoad,type="l")
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-08-15","2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-10-03","2011-11-01", #,"2011-05-01" ,"2011-08-15"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-10-03","2012-11-01", # "2012-08-15",
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% PH_dummy)# public holiday
DT_RLoad = dsc(Load_list, WD, PH)
plot(DT_RLoad,type="l")
which.min(DT_RLoad)/96
Load_mat[573]
Load_mat[573,1]
PH_dummy =as.Date(c("2010-04-02","2010-04-05","2010-05-13","2010-05-24","2010-06-03","2010-11-01", #,"2010-08-15","2010-10-03" ,"2010-05-01"
"2011-04-22","2011-04-25","2011-06-02","2011-06-13","2011-06-23","2011-08-15","2011-10-03","2011-11-01", #,"2011-05-01"
"2012-04-06","2012-04-09","2012-05-01","2012-05-17","2012-05-28","2012-06-07","2012-08-15","2012-10-03","2012-11-01", #
"2013-03-29","2013-04-01","2013-05-01","2013-05-09","2013-05-20","2013-05-30"))
#BD_dummy = as.Date(c("2011-06-03","2011-06-24","2012-04-30","2012-06-08"))
#WH_dummy = as.character(c(seq.Date(from=as.Date("2010-01-01"),to=as.Date("2010-01-06"),by="day"),
#                          seq.Date(from=as.Date("2010-12-24"),to=as.Date("2011-01-08"),by="day"),
#                          seq.Date(from=as.Date("2011-12-21"),to=as.Date("2012-01-08"),by="day")))
#WH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% WH_dummy)# Winter holiday
PH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% PH_dummy)# public holiday
#BD = as.numeric(Load_mat[(1:(702+k+1)),1] %in% BD_dummy)# Bridge Day
#MariaH = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-08-15","2011-08-15","2012-05-18")))
#PH_Sun = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-10-03","2011-05-01")))
#PH_Sat = as.numeric(Load_mat[(1:(702+k+1)),1] %in% as.Date(c("2010-05-01")))
#PH.Dummie = cbind(WH, PH, BD, MariaH, PH_Sun, PH_Sat)
DT_RLoad = dsc(Load_list, WD, PH)
plot(DT_RLoad,type="l")
which.min(DT_RLoad)
which.min(DT_RLoad)/96
Load_mat[412,1]
season.cov = function(x, year){
mat = as.matrix(x)
YN1 = matrix(data=mat,nrow=length(year),byrow=FALSE)
Y1  = rowMeans(YN1,na.rm = TRUE) #mean over years of hourly demand
hs = h.select(year,Y1, method="cv")
s = sm.regression(year,Y1,hs,eval.points=year)
season1 = s$estimate
season11 = rep(season1,dim(mat)[1]/length(year))
resid = (mat-season11)
return(resid)
}
resid_temp = season.cov(training_temp, year)
resid_sun  = season.cov(training_sun, year)
